<title>Prefix Detection With Trie Data Structure</title>
  <h1>Prefix Detection Algorithm With Trie Data Structure</h1>
    <br>This algorithm decides the prefixes of a string array (left text area). All prefixes will be written to
    the text area in the middle. The text area on the right will contain a single integer value which signi-
    fies the length of a prefix. To better understand the algorithm let's give an example:


    <br><br> Left text side array (full strings): <b> michael
    aliye 
    semerkant
    kara     
    aurelianus
    world </b>

     <br> Middle text side array (list of possible prefixes): <b>semer    
ali      
ka       
w        
aurelian 
mi         </b> 
     <br> Right text side (prefix size spesification):<b> 8 </b>
     
    <br><br>In this particular example, the output will be "aurelian" where the first parsed prefix to have a length 
    of 8 is "aurelian". On the other hand, if we have 5 instead of 8, we would have "semer" as output.

    Result is {{result}}


  <form action="compute" method="post">
        <textarea name="input1" rows="10" cols="30"></textarea>
        <textarea name="input2" rows="10" cols="30"></textarea>
        <textarea name="input3" rows="10" cols="30"></textarea>
        <br>
        <input type="submit">
  </form>
